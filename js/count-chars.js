/**
 * Script for Counting Characters
 *
 * @summary Binds input elements and counts characters for Title and Description on Post Edit, Post New,
 *          & AIOSEOP General Settings screens.
 *
 * @author Michael Torbert.
 * @author Semper Fi Web Design.
 * @copyright https://semperplugins.com
 * @version 2.9.2
 */

var snippetTitle = '';
var snippetDescription ='';
var aioseopTitle = '';
var aioseopDescription = '';
var docTitle = '';
var isGutenberg = aioseop_count_chars.isGutenberg; // jshint ignore:line
var autogenerateDescriptions = aioseop_count_chars.autogenerateDescriptions; // jshint ignore:line
var skipExcerpt = aioseop_count_chars.skipExcerpt; // jshint ignore:line

jQuery(document).ready( function() {
	aioseopUpdateMetaBoxFields();
	aioseopInitCounting();
});

/**
 * The aioseopUpdateMetaBoxFields() function.
 * 
 * Updates the preview snippet and input field placeholders in the meta box when a change happens.
 * 
 * @since 3.2.0
 */
function aioseopUpdateMetaBoxFields() {
	snippetTitle = $('#aiosp_snippet_title');
	snippetDescription = $('#aioseop_snippet_description');
	aioseopTitle = $('input[name="aiosp_title"]');
	aioseopDescription = $('textarea[name="aiosp_description"]');

	if ( 'false' === isGutenberg ) {
		updateMetaBoxClassicEditor();
	}
	else {
		updateMetaBoxGutenbergEditor();
	}

	aioseopTitle.on("input", function() {
		changeSnippet( snippetTitle, aioseopTitle );
		if( '' === aioseopTitle.val() ) {
			changeSnippet( snippetTitle, docTitle );
		}
	});
}

/**
 * The updateMetaBoxClassicEditor() function.
 * 
 * Updates the meta box if the Classic Editor is active.
 * 
 * @since 3.2.0
 */
function updateMetaBoxClassicEditor() {
	docTitle = $('#title');
	var postExcerpt = $('#excerpt');

	docTitle.on("input", function() {
		changePlaceholder( aioseopTitle, docTitle );
		if ( '' === aioseopTitle.val() ) {
			changeSnippet( snippetTitle, docTitle );
		}
	});

	aioseopDescription.on("input", function() {
		changeSnippet( snippetDescription, aioseopDescription );
		handleDescriptionClassicEditor();
	});

	postExcerpt.on("input", function() {
		handleDescriptionClassicEditor();
	});

	setTimeout(function () {
		tinymce.editors[0].on('KeyUp', function () { // jshint ignore:line
			handleDescriptionClassicEditor();
		});
	}, 1000);

	/**
	 * The handleDescriptionClassicEditor() function.
	 * 
	 * Handles the description in the Classic Editor.
	 * 
	 * @since 3.2.0
	 */
	function handleDescriptionClassicEditor() {
		if ( '' !== aioseopDescription.val() ) {
			return;
		}
		if ( 'on' === autogenerateDescriptions ) {
			if ( 'on' !== skipExcerpt && '' !== postExcerpt.val() ) {
				changeSnippet( snippetDescription, postExcerpt );
				changePlaceholder( aioseopDescription, postExcerpt );
				return;
			}
			var description = getDescription();
			snippetDescription.text( description );
			aioseopDescription.attr( 'placeholder', description );
		}
	}
}

/**
 * The updateMetaBoxGutenbergEditor() function.
 * 
 * Updates the meta box if the Gutenberg Editor is active.
 * 
 * @since 3.2.0
 */
function updateMetaBoxGutenbergEditor() {
	window._wpLoadBlockEditor.then( function() {
		setTimeout( function() {
			docTitle = $('#post-title-0');
			
			docTitle.on("input", function() {
				changePlaceholder( aioseopTitle, docTitle );
				if ( '' !== aioseopTitle.val() ) {
					return;
				}
				changeSnippet( snippetTitle, docTitle );
			});

			aioseopDescription.on("input", function() {
				changeSnippet( snippetDescription, aioseopDescription );
				handleDescriptionGutenberg();
			});

			wp.data.subscribe( function() {
				handleDescriptionGutenberg();
			});
			
		});
	});

	/**
	 * The handleDescriptionGutenberg() function.
	 * 
	 * Handles the description in the Gutenberg Editor.
	 * 
	 * @since 3.2.0
	 */
	function handleDescriptionGutenberg() {
		if ( '' !== aioseopDescription.val() ) {
			return;
		}
		if ( 'on' === autogenerateDescriptions ) {
			var postExcerpt = wp.data.select( 'core/editor' ).getEditedPostAttribute( 'excerpt' );
			if ( 'on' !== skipExcerpt && '' !== postExcerpt ) {
				snippetDescription.text( postExcerpt.replace( /<(?:.|\n)*?>/gm, "" ) );
				snippetDescription.attr( 'placeholder', postExcerpt );
				return;
			}

			var description = getDescription();
			snippetDescription.text( description );
			aioseopDescription.attr( 'placeholder', description );
		}
	}
}

/**
 * The changeSnippet() function.
 * 
 * Changes the value of a field in the preview snippet.
 * 
 * @since 3.2.0
 * 
 * @param jQuery_Object snippetField 
 * @param jQuery_Object inputField 
 */
function changeSnippet( snippetField, inputField ) {
	snippetField.text( inputField.val().replace( /<(?:.|\n)*?>/gm, "" ) );
}

/**
 * The changePlaceholder() function.
 * 
 * Changes the placeholder value of a field.
 * 
 * @since 3.2.0
 * 
 * @param jQuery_Object inputField
 * @param string placeholder
 */
function changePlaceholder( inputField, placeholder ) {
	inputField.attr( 'placeholder', placeholder.val() );
}

/**
 * The getDescription() function.
 * 
 * Gets the description (formatted) for the post.
 * 
 * @since 3.2.0
 * 
 * @return string
 */
function getDescription() {
	var postContent = '';
	if ( 'false' === isGutenberg ) {
		postContent = $('#content_ifr').contents().find('body')[0].innerHTML;
	} 
	else {
		postContent = wp.data.select('core/editor').getEditedPostAttribute('content');
	}
	var description = stripEditorMarkup(postContent).replace(/^(.{165}[^\s]*).*/, "$1");
	return decodeHtmlEntities( description );
}

/**
 * The stripEditorMarkup() function.
 * 
 * Strips all editor markup from the content.
 * 
 * @since 3.2.0
 * 
 * @param string editorContent
 * @return string 
 */
function stripEditorMarkup( editorContent ) {
	return editorContent.replace(/<[^>]*>?/gm, '').replace(/\s\s+/g, ' ').trim();
}

/**
 * The decodeHtmlEntities() function.
 * 
 * Decodes HTML entities to characters.
 * 
 * @since 3.2.0
 * 
 * @param string encodedString
 * @return string
 */
function decodeHtmlEntities( encodedString ) {
	var textArea = document.createElement('textarea');
	textArea.innerHTML = encodedString;
	return textArea.value;
  }

/**
 * AIOSEOP Init Counting
 *
 * @since ?
 */
function aioseopInitCounting(){
	/* count them characters */
	jQuery( '.aioseop_count_chars' ).on('keyup keydown', function(){
		aioseopCountChars( jQuery(this).eq(0), jQuery(this).parent().find('[name="' + jQuery(this).attr('data-length-field') + '"]').eq(0));
	});
	jQuery( '.aioseop_count_chars' ).each(function(){
		aioseopCountChars( jQuery(this).eq(0), jQuery(this).parent().find('[name="' + jQuery(this).attr('data-length-field') + '"]').eq(0));
	});
}

/**
 * @summary Counts characters.
 *
 * @since 1.0.0
 * @since 2.9.1 Fix JS conflict with LearnDash and function name.
 *
 * @param Object $field.
 * @param Object $cntfield.
 * @return Mixed.
 */
function aioseopCountChars( field, cntfield ) {
	var aiosp_title_extra = parseInt( aioseop_count_chars.aiosp_title_extra, 10 ); // jshint ignore:line
	var extra = 0;
	var field_size;
	if ( ( field.attr('name') === 'aiosp_title' ) && ( typeof aiosp_title_extra !== 'undefined' ) ) {
		extra = aiosp_title_extra;
	}
	cntfield.val( field.val().length + extra );
	if ( typeof field.attr('size') !== 'undefined' ) {
		field_size = field.attr('size');
	} else {
		field_size = field.attr('rows') * field.attr('cols');
	}
	field_size = parseInt(field_size, 10);
	if ( field_size < 10 ) {
		return;
	}
	if ( cntfield.val() > field_size ) {
		cntfield.removeClass().addClass('aioseop_count_ugly');
	} else if ( ( 'aiosp_title' === field.attr('name' ) ) || ( 'aiosp_home_title' === field.attr('name') ) ) {
		if ( cntfield.val() > ( field_size - 6 ) ) {
			cntfield.removeClass().addClass('aioseop_count_bad');
		} else {
			cntfield.removeClass().addClass('aioseop_count_good');
		}
	} else {
		if ( cntfield.val() > ( field_size - 10 ) ) {
			cntfield.removeClass().addClass('aioseop_count_bad');
		} else {
			cntfield.removeClass().addClass('aioseop_count_good');
		}
	}
}
